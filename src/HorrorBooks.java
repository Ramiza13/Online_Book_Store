
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.CharacterIterator;
import java.text.StringCharacterIterator;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sabri
 */
public class HorrorBooks extends javax.swing.JFrame {

    /**
     * Creates new form HorrorBooks
     */
    public HorrorBooks() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        horrortxt = new javax.swing.JLabel();
        horrorBookList = new javax.swing.JScrollPane();
        HorrorList1 = new javax.swing.JList<>();
        selectButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        horrorBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        horrortxt.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        horrortxt.setForeground(new java.awt.Color(255, 255, 255));
        horrortxt.setText("Choose Science Fiction Books you'de like to buy:");
        jPanel1.add(horrortxt);
        horrortxt.setBounds(90, 40, 640, 50);

        HorrorList1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 24)); // NOI18N
        HorrorList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "1. The Shining by Stephen King......................................240 Tk", "2. Dracula by Bram Stoker..............................................260 Tk", "3. The Exorcist by William Peter Blatty.............................210 Tk", "4. The Haunting of Hill House by Shirley Jackson...............180 Tk", "5. The Silence of the Lambs by Thomas Harris.................240 Tk", "6. Frankenstein by Mary Wollstonecraft Shelley................300 Tk", "7. Rosemary's Baby by Ira Levin......................................190 Tk", "8. Ghost Story by Peter Straub........................................320 Tk", "9. Red Dragon by Thomas Harris.....................................260 Tk", "10. Swan Song by Robert R. McCammon..........................450 Tk", "11. The Amityville Horror by Jay Anson.............................320 Tk", "12. The Green Mile by Stephen King.................................200 Tk", "13. We Have Always Lived in the Castle by Shirley Jackson...160 Tk", "14. Jaws by Peter Benchley...............................................240 Tk", "15. Horns by Joe Hill.........................................................390 Tk", "16. Flowers in the Attic by V.C. Andrews............................320 Tk", "17. Bag of Bones by Stephen King......................................175 Tk", "18. The Turn of the Screw by Henry James.........................230 Tk", "19. Coraline by Neil Gaiman ..............................................170 Tk", "20. Phantoms by Dean Koontz............................................300 Tk" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        horrorBookList.setViewportView(HorrorList1);

        jPanel1.add(horrorBookList);
        horrorBookList.setBounds(30, 100, 810, 280);

        selectButton.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        jPanel1.add(selectButton);
        selectButton.setBounds(590, 400, 110, 40);

        backButton.setBackground(new java.awt.Color(204, 204, 255));
        backButton.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton);
        backButton.setBounds(720, 400, 110, 40);

        horrorBackground.setIcon(new javax.swing.ImageIcon("D:\\Study\\CSE\\Level-2, Term-2\\CSE-220 OOP Sessional-II\\Project\\Book Store\\image\\horror-background.jpg")); // NOI18N
        jPanel1.add(horrorBackground);
        horrorBackground.setBounds(0, 0, 860, 460);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        booklist obj = new booklist();
        obj.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private static Workbook wb;
    private static FileInputStream fis;
    private static Sheet sh;
    private static Row row;
    private static Cell cell;
    private static FileOutputStream fos;
    
    
    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        // TODO add your handling code here:
        
        String name;
        String cost, shtname;
        
        List<String> a = HorrorList1.getSelectedValuesList();
        int size = a.size();
        
        for(int i=0; i<size; i++)
        {
            String str = a.get(i);
            
            try{
                FileInputStream fis = new FileInputStream("HorrorBook.csv");
                Scanner inp = new Scanner(fis);
                
                while(inp.hasNext())
                {
                    name = inp.next();
                    cost = inp.next();
                    shtname = inp.next();
                    
                    
                    if(name.equals(str))
                    {
                        PrintWriter pw;
                        try {
                        pw = new PrintWriter(new File("SelectBook.csv"));
                        StringBuffer csvData = new StringBuffer("");
                        //csvHeader.append("Name,Age,Designation\n");
 
                        // write header
                        //pw.write(csvHeader.toString());
 
                        // write data
                        csvData.append(name);
                        csvData.append(cost);
                        csvData.append('\n');
                       pw.write(csvData.toString());
                       pw.close();
                    } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    } 
                        /*try{
                            FileOutputStream fos = new FileOutputStream("Se");
                            PrintWriter p = new PrintWriter(fos);
                            p.println(shtname,cost);
                            
                            p.close();
                        }catch(Exception io){
                            System.out.println("ps");
                        }
                    }
                    
                    inp.close();
                    fis.close();
                    */
                    }
             }catch(Exception e){
                System.out.println("en");
            }
        }
        /*for(int i=0; i<size; i++)
        {
            String str = a.get(i);
            System.out.println(str);
            try {
                fis  = new FileInputStream("Database//HorrorBooks.xlsx");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(HorrorBooks.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try{
                
               try {
                   wb = WorkbookFactory.create(fis);
               } catch (InvalidFormatException ex) {
                   Logger.getLogger(SigninForm.class.getName()).log(Level.SEVERE, null, ex);
               }
               sh = wb.getSheet("Sheet1");
               int noOfRows = sh.getLastRowNum()+1;
//               System.out.println(noOfRows);
               String [][]data = new String[noOfRows][2];
               int tempRowCount=0,tempColCount=0;
               for (Row row : sh) {
                   for (Cell cell : row) {
                       cell.setCellType(Cell.CELL_TYPE_STRING);
                       String temp = (String)cell.getStringCellValue();
                       if(temp==null){
                           JOptionPane.showMessageDialog(this, "Database Error", "Database Incomplete", JOptionPane.ERROR_MESSAGE);
                           new booklist().setVisible(true);
                       }
                       tempColCount++;
                   }
                   tempRowCount++;
               }
               
              
               
               
               for (int k = sh.getFirstRowNum(); k <= sh.getLastRowNum(); k++) {
                   Row r = sh.getRow(k);
                   int j = r.getFirstCellNum();
                   int p = r.getFirstCellNum()+1;
                   int q = r.getLastCellNum();
                   /*name = r.getCell(0).toString();
                   System.out.println(name);
                   cost = r.getCell(1).toString();
                   System.out.println(cost);
                   shtname = r.getCell(2).toString();
                   System.out.println(shtname);
                   Cell c = r.getCell(j);
                   name = c.getStringCellValue();
                   
                   Cell d = r.getCell(p);
                   cost = d.getStringCellValue();
                   
                   Cell e = r.getCell(q);
                   shtname = e.getStringCellValue();
                   
                   if(name.equals(str))
                    {
                        try {
                               fis = new FileInputStream("Database//SelectedBooks.xlsx");
                                try {
                                    Workbook wb = WorkbookFactory.create(fis);
                                    Sheet sh = wb.getSheet("Sheet1");
                                    int numOfRows = sh.getLastRowNum();
                    
                                    Row row = sh.createRow(numOfRows+1);
                                    Cell cell = row.createCell(0);
                                    //double newName;
                                    cell.setCellValue(shtname);
                                    cell = row.createCell(1);
                                    cell.setCellValue(cost);
                    
                                    fis.close();
                                    FileOutputStream fos = new FileOutputStream("Database//SelectedBooks.xlsx");
                                    wb.write(fos);
//                    numOfRows = sh.getLastRowNum();
//                    System.out.println(numOfRows);
                    fos.close();
                } catch (IOException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidFormatException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (EncryptedDocumentException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                System.out.println("fis");
//                Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
            }
                    }
                   
                   /*for (int j = r.getFirstCellNum(); j < r.getLastCellNum(); j++) {
                       Cell c = r.getCell(j);
                       data[i][j] = c.getStringCellValue();
                       System.out.println(data[i][j]);
                   }
               }
               
               fis.close();
//                break;
//           
            }catch(Exception e){
                System.out.println("en");
            }
        }*/
        
        
        /*if(name.equals(str))
                    {
                        try {
                               fis = new FileInputStream("Database//HorrorBooks.xlsx");
                                try {
                                    Workbook wb = WorkbookFactory.create(fis);
                                    Sheet sh = wb.getSheet("Sheet1");
                                    int numOfRows = sh.getLastRowNum();
                    
                                    Row row = sh.createRow(numOfRows+1);
                                    Cell cell = row.createCell(0);
                                    //double newName;
                                    cell.setCellValue(shtname);
                                    cell = row.createCell(1);
                                    cell.setCellValue(cost);
                    
                                    fis.close();
                                    FileOutputStream fos = new FileOutputStream("Database//SelectedBooks.xlsx");
                                    wb.write(fos);
//                    numOfRows = sh.getLastRowNum();
//                    System.out.println(numOfRows);
                    fos.close();
                } catch (IOException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidFormatException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (EncryptedDocumentException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                System.out.println("fis");
//                Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
            }
                    }*/
        
        
        /*buyBooks buy = new buyBooks();
        buy.setVisible(true);
        this.setVisible(false);*/
    }//GEN-LAST:event_selectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HorrorBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HorrorBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HorrorBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HorrorBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HorrorBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> HorrorList1;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel horrorBackground;
    private javax.swing.JScrollPane horrorBookList;
    private javax.swing.JLabel horrortxt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables
}
