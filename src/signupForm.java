
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

public class signupForm extends javax.swing.JFrame {

    /**
     * Creates new form signupForm
     */
    public signupForm() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        useridField = new javax.swing.JTextField();
        creatPass = new javax.swing.JPasswordField();
        confirmPass = new javax.swing.JPasswordField();
        registerButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        SignUpText = new javax.swing.JLabel();
        signupBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        nameField.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jPanel1.add(nameField);
        nameField.setBounds(200, 110, 400, 30);

        emailField.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jPanel1.add(emailField);
        emailField.setBounds(200, 160, 400, 30);

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Name:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(70, 110, 130, 30);

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Email:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(70, 160, 90, 30);

        jLabel3.setFont(new java.awt.Font("Tempus Sans ITC", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Create an password:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(70, 260, 194, 33);

        jLabel4.setFont(new java.awt.Font("Tempus Sans ITC", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Confirm Password:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(70, 310, 200, 30);

        jLabel6.setFont(new java.awt.Font("Tempus Sans ITC", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("User id:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(70, 210, 100, 30);

        useridField.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jPanel1.add(useridField);
        useridField.setBounds(200, 210, 400, 30);
        jPanel1.add(creatPass);
        creatPass.setBounds(290, 260, 280, 30);
        jPanel1.add(confirmPass);
        confirmPass.setBounds(290, 310, 280, 30);

        registerButton.setBackground(new java.awt.Color(255, 255, 255));
        registerButton.setFont(new java.awt.Font("Tempus Sans ITC", 0, 24)); // NOI18N
        registerButton.setForeground(new java.awt.Color(51, 51, 51));
        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });
        jPanel1.add(registerButton);
        registerButton.setBounds(550, 390, 130, 40);

        backButton.setBackground(new java.awt.Color(204, 204, 255));
        backButton.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton);
        backButton.setBounds(700, 390, 110, 40);

        SignUpText.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
        SignUpText.setForeground(new java.awt.Color(255, 255, 255));
        SignUpText.setText("Create your account and enjoy the service!");
        jPanel1.add(SignUpText);
        SignUpText.setBounds(50, 30, 780, 50);

        signupBackground.setIcon(new javax.swing.ImageIcon("D:\\Study\\CSE\\Level-2, Term-2\\CSE-220 OOP Sessional-II\\Project\\Book Store\\image\\patrick-tomasso-Oaqk7qqNh_c-unsplash.jpg")); // NOI18N
        signupBackground.setMaximumSize(new java.awt.Dimension(1024, 682));
        signupBackground.setMinimumSize(new java.awt.Dimension(1024, 682));
        signupBackground.setPreferredSize(new java.awt.Dimension(1024, 682));
        jPanel1.add(signupBackground);
        signupBackground.setBounds(0, 0, 860, 460);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 860, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        SigninForm sgnfrm = new SigninForm();
        sgnfrm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private static Workbook wb;
    private static FileInputStream fis;
    private static Sheet sh;
    private static Row row;
    private static Cell cell;
    private static FileOutputStream fos;
    private int flag = 0;
    String matchData(String name,String email,String ID){
        try {
            fis = new FileInputStream("Database//signinform.xlsx");
            try {
                wb = WorkbookFactory.create(fis);
                sh = wb.getSheet("Sheet1");
                int numOfRows = sh.getLastRowNum()+1;
 //               String [][]data1 = new String[numOfRows][20];
                int tempRowCount=0,tempColCount=0;
                for (Row row : sh) {
                    for (Cell cell : row) {
                        cell.setCellType(Cell.CELL_TYPE_STRING);
                        String temp = (String)cell.getStringCellValue();
                        if(temp==null){
                            JOptionPane.showMessageDialog(this, "Database Error", "Database Incomplete", JOptionPane.ERROR_MESSAGE);
                           new booklist().setVisible(true);
                        }
                        tempColCount++;
                    }
                    tempRowCount++;
                }
                for (int i = sh.getFirstRowNum(); i <= sh.getLastRowNum(); i++) {
                    Row r = sh.getRow(i);
                    for (int j = r.getFirstCellNum(); j < r.getLastCellNum(); j++) {
                        Cell c = r.getCell(j);
                        String data;
                        data = c.getStringCellValue();
                        System.out.println(data);
                        if (j==0){
                            if (data.equals(name)){
                                fis.close();
                                return "name";
                            }
                        }
                        else if(j==1){
                            if (data.equals(email)){
                                fis.close();
                                return "email";
                            }
                        }
                        else if(j==3){
                            if (data.equals(ID)){
                                fis.close();
                                return "ID";
                            }
                        }
    //                       System.out.println(data[i][j]);
                    }
                }
                fis.close();
            } catch (IOException ex) {
                System.out.println("wb");
//                Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidFormatException ex) {
                System.out.println("wb");
//                Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (EncryptedDocumentException ex) {
                System.out.println("wb");
//                Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
            }catch (ArrayIndexOutOfBoundsException ea) {
            System.out.println("fis2");
//            Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        } catch (FileNotFoundException ex) {
            System.out.println("fis");
//            Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
        }catch (ArrayIndexOutOfBoundsException ep) {
            System.out.println("fis1");
//            Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "ALL_GOOD";
    }
    boolean entryData(){
        flag = 0;
        String newName = nameField.getText();
        String eMail = emailField.getText();
        String newId = useridField.getText();
        String newPass = creatPass.getText();
        String conPass = creatPass.getText();
        String result1 = matchData(newName,eMail,newId);
        if ("name".equals(result1)){
            JOptionPane.showMessageDialog(this, "This Name Is Already Enlisted!\nTry Using Different Name!", "Name Error!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else if("email".equals(result1)){
            JOptionPane.showMessageDialog(this, "This Email Is Already Enlisted!\nTry Using Different One!", "Email Error!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else if("ID".equals(result1)){
            JOptionPane.showMessageDialog(this, "This ID Is Already Enlisted!\nTry Using Different One!", "ID Error!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (newName.equals(null) || eMail.equals(null)|| newId.equals(null) || newPass.equals(null) || conPass.equals(null)){
            return false;
        }
        else if (!newPass.equals(conPass)){
            flag = 1;
            return false;
        }
        else {
            try {
                fis = new FileInputStream("Database//signinform.xlsx");
                try {
                    wb = WorkbookFactory.create(fis);
                    sh = wb.getSheet("Sheet1");
                    int numOfRows = sh.getLastRowNum();
                    
                    row = sh.createRow(numOfRows+1);
                    cell = row.createCell(0);
                    cell.setCellValue(newName);
                    cell = row.createCell(1);
                    cell.setCellValue(eMail);
                    cell = row.createCell(2);
                    cell.setCellValue(newPass);
                    cell = row.createCell(3);
                    cell.setCellValue(newId);
                    fis.close();
                    fos = new FileOutputStream("Database//signinform.xlsx");
                    wb.write(fos);
//                    numOfRows = sh.getLastRowNum();
//                    System.out.println(numOfRows);
                    fos.close();
                } catch (IOException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidFormatException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (EncryptedDocumentException ex) {
                    System.out.println("wb");
//                    Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                System.out.println("fis");
//                Logger.getLogger(registerForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return true;
    }
    
    
    
    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        
        boolean result = entryData();
        if (result==false && flag==0){
            JOptionPane.showMessageDialog(this, "Please Fill Up All The Information!", "Entry Failed!", JOptionPane.ERROR_MESSAGE);
            entryData();
        }
        else if(result==true && flag==1){
            JOptionPane.showMessageDialog(this, "Passwords Didn't Match!", "Password Error!", JOptionPane.ERROR_MESSAGE);
            flag = 0;
            entryData();
        }
        else{
            JOptionPane.showMessageDialog(this, "Data Stored Successfully!", "Success!", JOptionPane.INFORMATION_MESSAGE);
            this.setVisible(false);
            new SigninForm().setVisible(true);
        }
        
        
        /*SigninForm obj = new SigninForm();
        obj.setVisible(true);
        this.setVisible(false);*/
    }//GEN-LAST:event_registerButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(signupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(signupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(signupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(signupForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new signupForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel SignUpText;
    private javax.swing.JButton backButton;
    private javax.swing.JPasswordField confirmPass;
    private javax.swing.JPasswordField creatPass;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel signupBackground;
    private javax.swing.JTextField useridField;
    // End of variables declaration//GEN-END:variables
}
